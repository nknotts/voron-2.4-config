#####################################################################
# 	Macros
#####################################################################

[gcode_macro START_BEEPING]
gcode:
    UPDATE_DELAYED_GCODE ID=BEEPING DURATION=1

[delayed_gcode BEEPING]
gcode:
    M300 S500 P500
    UPDATE_DELAYED_GCODE ID=BEEPING DURATION=5

[gcode_macro STOP_BEEPING]
gcode:
    UPDATE_DELAYED_GCODE ID=BEEPING DURATION=0

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(60) %}         #edit to your park position
    {% set y = params.Y|default(10) %}        #edit to your park position
    {% set z = params.Z|default(5)|float %}    #edit to your park position
    {% set e = params.E|default(0) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=VPAUSE
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      M83                            ; set extruder to relative
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough to retract")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the currently-running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(60) %}
    {% set y = params.Y|default(10) %}
    {% set z = params.Z|default(100)|float %}
    {% set e = params.E|default(10)|float %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####

    SAVE_GCODE_STATE NAME=VCANCEL
    {% if printer.extruder.can_extrude|lower == 'true' %}
      M83            ; set extruder to relative
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough to retract")}
    {% endif %}
    G91
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
    TURN_OFF_HEATERS
    RESTORE_GCODE_STATE NAME=VCANCEL MOVE=0

    M107 ; turn off part cooling fan
    TURN_OFF_BED_FANS DELAY=300


    M117
    STATUS_OFF

    CANCEL_PRINT_BASE

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(0) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    RESTORE_GCODE_STATE NAME=VPAUSE MOVE=1 MOVE_SPEED=50
    STOP_BEEPING
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      M83           ; set extruder to relative
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(0)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(0)|int %}
    {% set CHAMBER = params.CHAMBER|default("42")|int %}

    {action_respond_info("PRINT_START Begin")}

    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0
    UPDATE_DELAYED_GCODE ID=TURN_OFF_BED_FANS_DELAY DURATION=0 # clear existing timer

    # start heating
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

    # home
    M117 Homing
    STATUS_HOMING
    G28
    BED_MESH_CLEAR

    G1 Z15 F9000 # move to center of bed

    # wait for heating to finish
    M117 Heating
    STATUS_HEATING
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED-1}

    # Heat soak
    {% if params.BED|int > 90 %}
      M117 Heatsoak {CHAMBER}C
      BEDFANSFAST
      {action_respond_info("Heat Soak Begin")}
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER}
      {action_respond_info("Heat Soak End")}
    {% endif %}

    WIPE_NOZZLE

    M117 QGL
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    M117 Homing Z
    STATUS_HOMING
    G28 Z

    M117 Bed Mesh
    STATUS_MESHING
    BED_MESH_CALIBRATE

    M117 Heating
    STATUS_HEATING
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}
    G1 X20 Y4.0 Z30 F3000 # move to start of purge line
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER}

    PURGE_LINE

    M117
    STATUS_PRINTING
    {action_respond_info("PRINT_START End")}

[gcode_macro PURGE_LINE]
gcode:
    G90                            ; absolute positioning
    G1 X20 Y4.0 Z30 F3000          ; go to tongue of print bed
    G1 Z0.2 F500                   ; move nozzle to bed
    M83                            ; set extruder to relative
    G1 E8 F900                     ; pre-purge prime LENGTH 
    G1 X100 E15.0 F800             ; intro line 1
    #G1 Y4.4 F800                  ; move in a little
    #G1 X20 E15.0 F800             ; second line
    #G10                           ; retract
    G1 X105 Z1
    M82                            ; set extruder to absolute
    G92 E0.0                       ; reset extruder
    G1 Z0.5 F9000                  ; move nozzle to prevent scratch

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
# https://gist.github.com/clee/dae03d0967867b07b745a032985efff5
gcode:
    M400                           ; wait for buffer to clear
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
    {% else %}
    {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
    {% else %}
    {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 100) %}
    {% set z_safe = 100.0 %}
    {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    M83                            ; set extruder to relative

    #https://e3d-online.zendesk.com/hc/en-us/articles/4406857421213-Start-and-End-G-code-for-faster-nozzle-changes
    # nero says 5mm is fine for nozzle changes
    G1 E-5.0 F800                ; retract filament
    M82                            ; set extruder to absolute
    G92 E0.0                       ; reset extruder
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    TURN_OFF_BED_FANS DELAY=300

    G90                            ; absolute positioning
    G0 X60 Y{max_y - 20} F3600     ; park nozzle at rear

    M117
    STATUS_OFF

[gcode_macro LOAD_FILAMENT]
gcode:
    STOP_BEEPING
    M83                            ; set extruder to relative
    G1 E50.0 F300                  ; load
    G1 E20.0 F300                  ; load
    G1 E30.0 F150                  ; prime nozzle with filament
    M82                            ; set extruder to absolute
    G92 E0.0                       ; reset extruder

[gcode_macro UNLOAD_FILAMENT]
gcode:
    STOP_BEEPING
    M83                            ; set extruder to relative
    G1 E10.0 F300                  ; extrude a little to soften tip
    G1 E-50.0 F600                 ; retract all the way
    G1 E-40.0 F600                 ; retract all the way
    M82                            ; set extruder to absolute
    G92 E0.0                       ; reset extruder

[gcode_macro M600]
description: Filament change
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    START_BEEPING
    PAUSE
    STOP_BEEPING
    G91
    #G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    #G1 E-50 F1000 ; wtf is this
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro WIPE_NOZZLE]
variable_brush_top: 6 ; Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_start: 234
variable_brush_width: 36 
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              5	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        3000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        5000	         ; Nozzle wipe speed in mm/min.
gcode:
    ## Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=clean_nozzle

    ## Set to absolute positioning.
    G90

    ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
    {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

    G1 Z{brush_top   + clearance_z} F{prep_spd_z}
    G1 X{brush_start} F{prep_spd_xy}
    G1 Y{Ry}

    ## Move nozzle down into brush.
    G1 Z{brush_top} F{prep_spd_z}

    ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{brush_start + brush_width} F{wipe_spd_xy}
        G1 X{brush_start} F{wipe_spd_xy}
    {% endfor %}

    ## Clear from area.
    G1 Z{brush_top + clearance_z} F{prep_spd_z}

    ## Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=clean_nozzle

[gcode_macro M73]
description: Slicer time remaining estimate
rename_existing: M990073
variable_print_time_remaining: 0
gcode:
    {% if params.P is defined %}
        M990073 P{params.P | int}
    {% endif %}

    {% if params.R is defined %}
        SET_GCODE_VARIABLE MACRO=M73 VARIABLE=print_time_remaining VALUE={params.R}
    {% endif %}


[gcode_macro TURN_ON_BED_FANS]
gcode:
  UPDATE_DELAYED_GCODE ID=TURN_OFF_BED_FANS_DELAY DURATION=0
  SET_FAN_SPEED FAN=nevermore SPEED=1
  SET_FAN_SPEED FAN=bed_fans SPEED=0.6

[gcode_macro TURN_OFF_BED_FANS]
gcode:
  {% set Delay = params.DELAY|default(0)|int %}

  {% if Delay == 0 %}
    UPDATE_DELAYED_GCODE ID=TURN_OFF_BED_FANS_DELAY DURATION=0.01
  {% else %}
    UPDATE_DELAYED_GCODE ID=TURN_OFF_BED_FANS_DELAY DURATION={Delay}
  {% endif %}


[delayed_gcode TURN_OFF_BED_FANS_DELAY]
gcode:
  SET_FAN_SPEED FAN=nevermore SPEED=0
  SET_FAN_SPEED FAN=bed_fans SPEED=0

[gcode_macro M300]
gcode:
    {% set s = params.S|default(500)|int %}
    {% set p = params.P|default(500)|int %}
    SET_PIN PIN=beeper VALUE={s}
    G4 P{p}
    SET_PIN PIN=beeper VALUE=0

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}

	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED

	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}

		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED